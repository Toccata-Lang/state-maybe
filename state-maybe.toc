
;; state-maybe monad with lazy comp*

(defn reduce-args [args s final-result]
  (assert (instance? Vector final-result))

  (or (and (empty? args)
           (maybe [final-result s]))
      (let [x (flat-map (first args) (fn [arg] (arg s)))]
        (and x (let [[result new-s] (extract x)]
                 (reduce-args (rest args) new-s (conj final-result result)))))))

(deftype new-sm [invoke-fn]
  (assert (instance? Fn invoke-fn))
  ;; TODO: enable
  ;; (assert (function-returns (maybe-of Vector)))

  Stringable
  (string-list [x]
    (comp (list "<new-sm ")
          (string-list (.invoke-fn x))
          (list ">")))

  Function
  (invoke [ev s]
    (invoke-fn s))

  Container
  (map [mv f]
    (new-sm (fn [s]
              (let [a (invoke-fn s)]
                (and a (let [[v new-s] (extract a)]
                         (maybe [(f v) new-s])))))))

  (wrap [b v]
    (new-sm (fn [s]
              (maybe [v s]))))

  (apply [fv args]
    (new-sm (fn [s]
              (let [c (reduce-args args s [])]
                (and c (let [[results s] (extract c)
                             y (fv s)]
                         (and y (let [[f s] (extract y)]
                                  (or (and (empty? results)
                                           (maybe [(f) s]))
                                      (maybe [(apply f (seq results)) s]))))))))))

  (flat-map [ev f]
    (new-sm (fn [s]
              (let [d (invoke-fn s)]
                (and d (let [[v ss] (extract d)]
                         ((f v) ss)))))))

  Composition
  (zero [_] (new-sm (fn [_] nothing)))

  (comp* [mv sm-vs]
    (assert (instance? (list-of new-sm) sm-vs))

    (new-sm (fn [s]
              (or (invoke-fn s)
                  (let [first-mv (first sm-vs)]
                    (and first-mv ((comp* (extract first-mv) (rest sm-vs)) s))))))))

(defprotocol Traversal
  (traverse [coll f]
    ;; traverses a Sequence, applying 'f' to each item
    ;; 'f' must take one value and return a 'state-maybe' value
    (assert-result x (instance? new-sm x))))

(def zero-sm
  (new-sm (fn [_] nothing)))

(def state-maybe
  (reify
    Type
    (type-name [_]
      "*state-maybe wrapper*")

    (instance? [_ x]
      (instance? new-sm x))

    Composition
    (comp* [sm fs]
      (comp* (fn [x]
               (invoke sm x))
             fs))

    Function
    (invoke [_ v]
      (new-sm (fn [s]
                (maybe [v s]))))

    Composition
    (zero [_] zero-sm)))

(extend-type Vector
  Traversal
  (traverse [coll f]
    (map coll f state-maybe)))

(extend-type List
  Traversal
  (traverse [coll f]
    (map coll f state-maybe)))

(defn lift [f]
  (fn [& args]
    (new-sm (fn [s]
              (maybe [(apply f args) s])))))

(defn update-state [f]
  (new-sm (fn [s]
            (maybe [s (f s)]))))

(defn get-val
  ([k]
   (new-sm (fn [s]
             (let [x (get s k)]
               (and x (let [v (extract x)]
                        (maybe [v s])))))))

  ([k nf]
   (new-sm (fn [s]
             (or (let [x (get s k)]
                   (and x (let [v (extract x)]
                            (maybe [v s]))))
                 (maybe [nf s]))))))

(defn set-val [k v]
  (new-sm (fn [s]
            (maybe [nothing (assoc s k v)]))))

(defn dissoc-val [k]
  (new-sm (fn [s]
            (maybe [nothing (dissoc s k)]))))

(defn get-in-val
  ([path]
     (new-sm (fn [s]
               (let [x (get-in s path)]
                 (and x (let [v (extract x)]
                          (maybe [v s])))))))
  ([path nf]
     (new-sm (fn [s]
               (or (let [x (get-in s path)]
                     (and x (let [v (extract x)]
                              (maybe [v s]))))
                   (maybe [nf s]))))))

(defn assoc-in-val [path v]
  (new-sm (fn [s]
            (maybe [v (assoc-in s path v)]))))

(defn update-val [key f]
  (new-sm (fn [s]
            (let [x (get s key)]
              (and x (let [old-v (extract x)
                           y (update-in s [key] f)]
                       (and y (let [new-s (extract y)]
                                (maybe [old-v new-s])))))))))

(defn update-in-val [path f]
  (new-sm (fn [s]
            (let [x (get-in s path)]
              (and x (let [old-v (extract x)
                           y (update-in s path f)]
                       (and y (let [new-s (extract y)]
                                (maybe [old-v new-s])))))))))

(defn recur-fn [f as s]
  (assert (instance? Vector as))
  (let [x (f s)]
    (or (and (= nothing x)
             (maybe [as s]))
        (let [[v ss] (extract x)]
          (recur-fn f (conj as v) ss)))))

(defn recur [mv]
  (new-sm (fn [s]
            (let [x (mv s)]
              (and x (let [[v ss] (extract x)
                           y (recur-fn (.invoke-fn mv) [v] ss)]
                       (and y (let [[vs s] (extract y)]
                                (maybe [vs s])))))))))

(defn when [when-val]
  (new-sm (fn [s]
            (and when-val (let [v (extract when-val)]
                            (maybe [v s]))))))

(defn when-not [when-not-val]
  (new-sm (fn [s]
            (and (= nothing when-not-val)
                 (maybe [nothing s])))))
